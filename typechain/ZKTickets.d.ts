/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ZKTicketsInterface extends ethers.utils.Interface {
  functions: {
    "acceptRefundRequest(uint256,uint256)": FunctionFragment;
    "acceptResaleRequest(uint256,uint256,bytes32)": FunctionFragment;
    "acceptTransfer(uint256,uint256,bytes32)": FunctionFragment;
    "calculatePurchaseFee(uint256)": FunctionFragment;
    "calculateResaleFee(uint256)": FunctionFragment;
    "cancelTransferRequest(bytes32,bytes32,uint256[8],uint256,uint256)": FunctionFragment;
    "createNewTicketedEvent(uint256,string,uint256,address,bool)": FunctionFragment;
    "createTransferRequest(bytes32,bytes32,uint256[8],uint256,uint8,address,uint256)": FunctionFragment;
    "getRequestsByMe(uint256,address)": FunctionFragment;
    "getRequestsToMe(uint256,address)": FunctionFragment;
    "getTransferRequestsByEventIndex(uint256)": FunctionFragment;
    "getTransferRequestsForPagination(uint256,uint256[5])": FunctionFragment;
    "handleTicket(uint256[8],bytes32,bytes32)": FunctionFragment;
    "nullifierHashes(bytes32)": FunctionFragment;
    "proStaking()": FunctionFragment;
    "purchaseTicket(uint256,bytes32)": FunctionFragment;
    "speculativeSaleCounter(uint256,address)": FunctionFragment;
    "ticketCommitments(bytes32)": FunctionFragment;
    "ticketedEventIndex()": FunctionFragment;
    "ticketedEvents(uint256)": FunctionFragment;
    "verifier()": FunctionFragment;
    "verifyTicket(bytes32,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptRefundRequest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptResaleRequest",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptTransfer",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePurchaseFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateResaleFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTransferRequest",
    values: [
      BytesLike,
      BytesLike,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewTicketedEvent",
    values: [BigNumberish, string, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "createTransferRequest",
    values: [
      BytesLike,
      BytesLike,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestsByMe",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestsToMe",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferRequestsByEventIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferRequestsForPagination",
    values: [
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "handleTicket",
    values: [
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nullifierHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseTicket",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "speculativeSaleCounter",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketCommitments",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketedEventIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ticketedEvents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifyTicket",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptRefundRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptResaleRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePurchaseFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateResaleFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTransferRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewTicketedEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTransferRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestsByMe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestsToMe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferRequestsByEventIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferRequestsForPagination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nullifierHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proStaking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "speculativeSaleCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketCommitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketedEventIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketedEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyTicket",
    data: BytesLike
  ): Result;

  events: {
    "NewTicketedEventCreated(uint256)": EventFragment;
    "TicketInvalidated(bytes32)": EventFragment;
    "TicketPurchased(uint256)": EventFragment;
    "TicketRefundComplete(uint256,uint256)": EventFragment;
    "TicketResaleComplete(uint256,uint256)": EventFragment;
    "TicketTransferComplete(uint256,uint256)": EventFragment;
    "TicketTransferRequestCancelled(uint256,uint256)": EventFragment;
    "TicketTransferRequestCreated(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewTicketedEventCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketInvalidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketRefundComplete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketResaleComplete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketTransferComplete"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TicketTransferRequestCancelled"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TicketTransferRequestCreated"
  ): EventFragment;
}

export type NewTicketedEventCreatedEvent = TypedEvent<
  [BigNumber] & { index: BigNumber }
>;

export type TicketInvalidatedEvent = TypedEvent<
  [string] & { commitment: string }
>;

export type TicketPurchasedEvent = TypedEvent<
  [BigNumber] & { eventIndex: BigNumber }
>;

export type TicketRefundCompleteEvent = TypedEvent<
  [BigNumber, BigNumber] & { eventIndex: BigNumber; requestIndex: BigNumber }
>;

export type TicketResaleCompleteEvent = TypedEvent<
  [BigNumber, BigNumber] & { eventIndex: BigNumber; requestIndex: BigNumber }
>;

export type TicketTransferCompleteEvent = TypedEvent<
  [BigNumber, BigNumber] & { eventIndex: BigNumber; requestIndex: BigNumber }
>;

export type TicketTransferRequestCancelledEvent = TypedEvent<
  [BigNumber, BigNumber] & { eventIndex: BigNumber; requestIndex: BigNumber }
>;

export type TicketTransferRequestCreatedEvent = TypedEvent<
  [BigNumber, BigNumber] & { eventIndex: BigNumber; requestIndex: BigNumber }
>;

export class ZKTickets extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ZKTicketsInterface;

  functions: {
    acceptRefundRequest(
      eventIndex: BigNumberish,
      transferRequestIndex: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptResaleRequest(
      eventIndex: BigNumberish,
      transferRequestIndex: BigNumberish,
      _newCommitment: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptTransfer(
      eventIndex: BigNumberish,
      transferRequestIndex: BigNumberish,
      _newCommitment: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculatePurchaseFee(
      purchasePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { fee: BigNumber; total: BigNumber }>;

    calculateResaleFee(
      resalePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        singleFee: BigNumber;
        doubleFee: BigNumber;
        total: BigNumber;
      }
    >;

    cancelTransferRequest(
      _commitment: BytesLike,
      _nullifierHash: BytesLike,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      eventIndex: BigNumberish,
      transferRequestIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createNewTicketedEvent(
      price: BigNumberish,
      eventName: string,
      availableTickets: BigNumberish,
      externalHandler: string,
      allowSpeculation: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createTransferRequest(
      _commitment: BytesLike,
      _nullifierHash: BytesLike,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      eventIndex: BigNumberish,
      transferType: BigNumberish,
      transferTo: string,
      transferPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRequestsByMe(
      eventIndex: BigNumberish,
      myAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getRequestsToMe(
      eventIndex: BigNumberish,
      myAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getTransferRequestsByEventIndex(
      eventIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([boolean, number, string, string, string, number, BigNumber] & {
          exists: boolean;
          status: number;
          ticketCommitment: string;
          ticketNullifierHash: string;
          transferTo: string;
          transferType: number;
          price: BigNumber;
        })[]
      ]
    >;

    getTransferRequestsForPagination(
      eventIndex: BigNumberish,
      indexes: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [boolean, number, string, string, string, number, BigNumber] & {
            exists: boolean;
            status: number;
            ticketCommitment: string;
            ticketNullifierHash: string;
            transferTo: string;
            transferType: number;
            price: BigNumber;
          },
          [boolean, number, string, string, string, number, BigNumber] & {
            exists: boolean;
            status: number;
            ticketCommitment: string;
            ticketNullifierHash: string;
            transferTo: string;
            transferType: number;
            price: BigNumber;
          },
          [boolean, number, string, string, string, number, BigNumber] & {
            exists: boolean;
            status: number;
            ticketCommitment: string;
            ticketNullifierHash: string;
            transferTo: string;
            transferType: number;
            price: BigNumber;
          },
          [boolean, number, string, string, string, number, BigNumber] & {
            exists: boolean;
            status: number;
            ticketCommitment: string;
            ticketNullifierHash: string;
            transferTo: string;
            transferType: number;
            price: BigNumber;
          },
          [boolean, number, string, string, string, number, BigNumber] & {
            exists: boolean;
            status: number;
            ticketCommitment: string;
            ticketNullifierHash: string;
            transferTo: string;
            transferType: number;
            price: BigNumber;
          }
        ]
      ]
    >;

    handleTicket(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _nullifierHash: BytesLike,
      _commitment: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nullifierHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    proStaking(overrides?: CallOverrides): Promise<[string]>;

    purchaseTicket(
      _ticketedEventIndex: BigNumberish,
      commitment: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    speculativeSaleCounter(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ticketCommitments(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, boolean] & {
        buyer: string;
        ticketedEventIndex: BigNumber;
        used: boolean;
        transferInitiated: boolean;
      }
    >;

    ticketedEventIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    ticketedEvents(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber, string, boolean] & {
        creator: string;
        price: BigNumber;
        eventName: string;
        availableTickets: BigNumber;
        externalHandler: string;
        allowSpeculation: boolean;
      }
    >;

    verifier(overrides?: CallOverrides): Promise<[string]>;

    verifyTicket(
      _commitment: BytesLike,
      _nullifierHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  acceptRefundRequest(
    eventIndex: BigNumberish,
    transferRequestIndex: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptResaleRequest(
    eventIndex: BigNumberish,
    transferRequestIndex: BigNumberish,
    _newCommitment: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptTransfer(
    eventIndex: BigNumberish,
    transferRequestIndex: BigNumberish,
    _newCommitment: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculatePurchaseFee(
    purchasePrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { fee: BigNumber; total: BigNumber }>;

  calculateResaleFee(
    resalePrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      singleFee: BigNumber;
      doubleFee: BigNumber;
      total: BigNumber;
    }
  >;

  cancelTransferRequest(
    _commitment: BytesLike,
    _nullifierHash: BytesLike,
    _proof: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    eventIndex: BigNumberish,
    transferRequestIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createNewTicketedEvent(
    price: BigNumberish,
    eventName: string,
    availableTickets: BigNumberish,
    externalHandler: string,
    allowSpeculation: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createTransferRequest(
    _commitment: BytesLike,
    _nullifierHash: BytesLike,
    _proof: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    eventIndex: BigNumberish,
    transferType: BigNumberish,
    transferTo: string,
    transferPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRequestsByMe(
    eventIndex: BigNumberish,
    myAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getRequestsToMe(
    eventIndex: BigNumberish,
    myAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTransferRequestsByEventIndex(
    eventIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([boolean, number, string, string, string, number, BigNumber] & {
      exists: boolean;
      status: number;
      ticketCommitment: string;
      ticketNullifierHash: string;
      transferTo: string;
      transferType: number;
      price: BigNumber;
    })[]
  >;

  getTransferRequestsForPagination(
    eventIndex: BigNumberish,
    indexes: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: CallOverrides
  ): Promise<
    [
      [boolean, number, string, string, string, number, BigNumber] & {
        exists: boolean;
        status: number;
        ticketCommitment: string;
        ticketNullifierHash: string;
        transferTo: string;
        transferType: number;
        price: BigNumber;
      },
      [boolean, number, string, string, string, number, BigNumber] & {
        exists: boolean;
        status: number;
        ticketCommitment: string;
        ticketNullifierHash: string;
        transferTo: string;
        transferType: number;
        price: BigNumber;
      },
      [boolean, number, string, string, string, number, BigNumber] & {
        exists: boolean;
        status: number;
        ticketCommitment: string;
        ticketNullifierHash: string;
        transferTo: string;
        transferType: number;
        price: BigNumber;
      },
      [boolean, number, string, string, string, number, BigNumber] & {
        exists: boolean;
        status: number;
        ticketCommitment: string;
        ticketNullifierHash: string;
        transferTo: string;
        transferType: number;
        price: BigNumber;
      },
      [boolean, number, string, string, string, number, BigNumber] & {
        exists: boolean;
        status: number;
        ticketCommitment: string;
        ticketNullifierHash: string;
        transferTo: string;
        transferType: number;
        price: BigNumber;
      }
    ]
  >;

  handleTicket(
    _proof: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    _nullifierHash: BytesLike,
    _commitment: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nullifierHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  proStaking(overrides?: CallOverrides): Promise<string>;

  purchaseTicket(
    _ticketedEventIndex: BigNumberish,
    commitment: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  speculativeSaleCounter(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ticketCommitments(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean, boolean] & {
      buyer: string;
      ticketedEventIndex: BigNumber;
      used: boolean;
      transferInitiated: boolean;
    }
  >;

  ticketedEventIndex(overrides?: CallOverrides): Promise<BigNumber>;

  ticketedEvents(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, BigNumber, string, boolean] & {
      creator: string;
      price: BigNumber;
      eventName: string;
      availableTickets: BigNumber;
      externalHandler: string;
      allowSpeculation: boolean;
    }
  >;

  verifier(overrides?: CallOverrides): Promise<string>;

  verifyTicket(
    _commitment: BytesLike,
    _nullifierHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    acceptRefundRequest(
      eventIndex: BigNumberish,
      transferRequestIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptResaleRequest(
      eventIndex: BigNumberish,
      transferRequestIndex: BigNumberish,
      _newCommitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptTransfer(
      eventIndex: BigNumberish,
      transferRequestIndex: BigNumberish,
      _newCommitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    calculatePurchaseFee(
      purchasePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { fee: BigNumber; total: BigNumber }>;

    calculateResaleFee(
      resalePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        singleFee: BigNumber;
        doubleFee: BigNumber;
        total: BigNumber;
      }
    >;

    cancelTransferRequest(
      _commitment: BytesLike,
      _nullifierHash: BytesLike,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      eventIndex: BigNumberish,
      transferRequestIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createNewTicketedEvent(
      price: BigNumberish,
      eventName: string,
      availableTickets: BigNumberish,
      externalHandler: string,
      allowSpeculation: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    createTransferRequest(
      _commitment: BytesLike,
      _nullifierHash: BytesLike,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      eventIndex: BigNumberish,
      transferType: BigNumberish,
      transferTo: string,
      transferPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getRequestsByMe(
      eventIndex: BigNumberish,
      myAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getRequestsToMe(
      eventIndex: BigNumberish,
      myAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTransferRequestsByEventIndex(
      eventIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([boolean, number, string, string, string, number, BigNumber] & {
        exists: boolean;
        status: number;
        ticketCommitment: string;
        ticketNullifierHash: string;
        transferTo: string;
        transferType: number;
        price: BigNumber;
      })[]
    >;

    getTransferRequestsForPagination(
      eventIndex: BigNumberish,
      indexes: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<
      [
        [boolean, number, string, string, string, number, BigNumber] & {
          exists: boolean;
          status: number;
          ticketCommitment: string;
          ticketNullifierHash: string;
          transferTo: string;
          transferType: number;
          price: BigNumber;
        },
        [boolean, number, string, string, string, number, BigNumber] & {
          exists: boolean;
          status: number;
          ticketCommitment: string;
          ticketNullifierHash: string;
          transferTo: string;
          transferType: number;
          price: BigNumber;
        },
        [boolean, number, string, string, string, number, BigNumber] & {
          exists: boolean;
          status: number;
          ticketCommitment: string;
          ticketNullifierHash: string;
          transferTo: string;
          transferType: number;
          price: BigNumber;
        },
        [boolean, number, string, string, string, number, BigNumber] & {
          exists: boolean;
          status: number;
          ticketCommitment: string;
          ticketNullifierHash: string;
          transferTo: string;
          transferType: number;
          price: BigNumber;
        },
        [boolean, number, string, string, string, number, BigNumber] & {
          exists: boolean;
          status: number;
          ticketCommitment: string;
          ticketNullifierHash: string;
          transferTo: string;
          transferType: number;
          price: BigNumber;
        }
      ]
    >;

    handleTicket(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _nullifierHash: BytesLike,
      _commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    nullifierHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    proStaking(overrides?: CallOverrides): Promise<string>;

    purchaseTicket(
      _ticketedEventIndex: BigNumberish,
      commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    speculativeSaleCounter(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ticketCommitments(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, boolean] & {
        buyer: string;
        ticketedEventIndex: BigNumber;
        used: boolean;
        transferInitiated: boolean;
      }
    >;

    ticketedEventIndex(overrides?: CallOverrides): Promise<BigNumber>;

    ticketedEvents(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber, string, boolean] & {
        creator: string;
        price: BigNumber;
        eventName: string;
        availableTickets: BigNumber;
        externalHandler: string;
        allowSpeculation: boolean;
      }
    >;

    verifier(overrides?: CallOverrides): Promise<string>;

    verifyTicket(
      _commitment: BytesLike,
      _nullifierHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "NewTicketedEventCreated(uint256)"(
      index?: null
    ): TypedEventFilter<[BigNumber], { index: BigNumber }>;

    NewTicketedEventCreated(
      index?: null
    ): TypedEventFilter<[BigNumber], { index: BigNumber }>;

    "TicketInvalidated(bytes32)"(
      commitment?: null
    ): TypedEventFilter<[string], { commitment: string }>;

    TicketInvalidated(
      commitment?: null
    ): TypedEventFilter<[string], { commitment: string }>;

    "TicketPurchased(uint256)"(
      eventIndex?: null
    ): TypedEventFilter<[BigNumber], { eventIndex: BigNumber }>;

    TicketPurchased(
      eventIndex?: null
    ): TypedEventFilter<[BigNumber], { eventIndex: BigNumber }>;

    "TicketRefundComplete(uint256,uint256)"(
      eventIndex?: null,
      requestIndex?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { eventIndex: BigNumber; requestIndex: BigNumber }
    >;

    TicketRefundComplete(
      eventIndex?: null,
      requestIndex?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { eventIndex: BigNumber; requestIndex: BigNumber }
    >;

    "TicketResaleComplete(uint256,uint256)"(
      eventIndex?: null,
      requestIndex?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { eventIndex: BigNumber; requestIndex: BigNumber }
    >;

    TicketResaleComplete(
      eventIndex?: null,
      requestIndex?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { eventIndex: BigNumber; requestIndex: BigNumber }
    >;

    "TicketTransferComplete(uint256,uint256)"(
      eventIndex?: null,
      requestIndex?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { eventIndex: BigNumber; requestIndex: BigNumber }
    >;

    TicketTransferComplete(
      eventIndex?: null,
      requestIndex?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { eventIndex: BigNumber; requestIndex: BigNumber }
    >;

    "TicketTransferRequestCancelled(uint256,uint256)"(
      eventIndex?: null,
      requestIndex?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { eventIndex: BigNumber; requestIndex: BigNumber }
    >;

    TicketTransferRequestCancelled(
      eventIndex?: null,
      requestIndex?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { eventIndex: BigNumber; requestIndex: BigNumber }
    >;

    "TicketTransferRequestCreated(uint256,uint256)"(
      eventIndex?: null,
      requestIndex?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { eventIndex: BigNumber; requestIndex: BigNumber }
    >;

    TicketTransferRequestCreated(
      eventIndex?: null,
      requestIndex?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { eventIndex: BigNumber; requestIndex: BigNumber }
    >;
  };

  estimateGas: {
    acceptRefundRequest(
      eventIndex: BigNumberish,
      transferRequestIndex: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptResaleRequest(
      eventIndex: BigNumberish,
      transferRequestIndex: BigNumberish,
      _newCommitment: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptTransfer(
      eventIndex: BigNumberish,
      transferRequestIndex: BigNumberish,
      _newCommitment: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculatePurchaseFee(
      purchasePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateResaleFee(
      resalePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelTransferRequest(
      _commitment: BytesLike,
      _nullifierHash: BytesLike,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      eventIndex: BigNumberish,
      transferRequestIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createNewTicketedEvent(
      price: BigNumberish,
      eventName: string,
      availableTickets: BigNumberish,
      externalHandler: string,
      allowSpeculation: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createTransferRequest(
      _commitment: BytesLike,
      _nullifierHash: BytesLike,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      eventIndex: BigNumberish,
      transferType: BigNumberish,
      transferTo: string,
      transferPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRequestsByMe(
      eventIndex: BigNumberish,
      myAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestsToMe(
      eventIndex: BigNumberish,
      myAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransferRequestsByEventIndex(
      eventIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransferRequestsForPagination(
      eventIndex: BigNumberish,
      indexes: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handleTicket(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _nullifierHash: BytesLike,
      _commitment: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nullifierHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proStaking(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseTicket(
      _ticketedEventIndex: BigNumberish,
      commitment: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    speculativeSaleCounter(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ticketCommitments(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ticketedEventIndex(overrides?: CallOverrides): Promise<BigNumber>;

    ticketedEvents(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifier(overrides?: CallOverrides): Promise<BigNumber>;

    verifyTicket(
      _commitment: BytesLike,
      _nullifierHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptRefundRequest(
      eventIndex: BigNumberish,
      transferRequestIndex: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptResaleRequest(
      eventIndex: BigNumberish,
      transferRequestIndex: BigNumberish,
      _newCommitment: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptTransfer(
      eventIndex: BigNumberish,
      transferRequestIndex: BigNumberish,
      _newCommitment: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculatePurchaseFee(
      purchasePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateResaleFee(
      resalePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelTransferRequest(
      _commitment: BytesLike,
      _nullifierHash: BytesLike,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      eventIndex: BigNumberish,
      transferRequestIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createNewTicketedEvent(
      price: BigNumberish,
      eventName: string,
      availableTickets: BigNumberish,
      externalHandler: string,
      allowSpeculation: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createTransferRequest(
      _commitment: BytesLike,
      _nullifierHash: BytesLike,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      eventIndex: BigNumberish,
      transferType: BigNumberish,
      transferTo: string,
      transferPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRequestsByMe(
      eventIndex: BigNumberish,
      myAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestsToMe(
      eventIndex: BigNumberish,
      myAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransferRequestsByEventIndex(
      eventIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransferRequestsForPagination(
      eventIndex: BigNumberish,
      indexes: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handleTicket(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _nullifierHash: BytesLike,
      _commitment: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nullifierHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseTicket(
      _ticketedEventIndex: BigNumberish,
      commitment: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    speculativeSaleCounter(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ticketCommitments(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ticketedEventIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ticketedEvents(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifyTicket(
      _commitment: BytesLike,
      _nullifierHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
