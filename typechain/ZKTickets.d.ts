/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ZKTicketsInterface extends ethers.utils.Interface {
  functions: {
    "createNewTicketedEvent(uint256,string,uint256,address)": FunctionFragment;
    "handleTicket(uint256[8],bytes32,bytes32)": FunctionFragment;
    "nullifierHashes(bytes32)": FunctionFragment;
    "purchaseTicket(uint256,bytes32)": FunctionFragment;
    "ticketCommitments(bytes32)": FunctionFragment;
    "ticketedEventIndex()": FunctionFragment;
    "ticketedEvents(uint256)": FunctionFragment;
    "verifier()": FunctionFragment;
    "verifyTicket(bytes32,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createNewTicketedEvent",
    values: [BigNumberish, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "handleTicket",
    values: [
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nullifierHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseTicket",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketCommitments",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketedEventIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ticketedEvents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifyTicket",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createNewTicketedEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nullifierHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketCommitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketedEventIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketedEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyTicket",
    data: BytesLike
  ): Result;

  events: {
    "NewTicketedEventCreated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewTicketedEventCreated"): EventFragment;
}

export type NewTicketedEventCreatedEvent = TypedEvent<
  [BigNumber] & { index: BigNumber }
>;

export class ZKTickets extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ZKTicketsInterface;

  functions: {
    createNewTicketedEvent(
      price: BigNumberish,
      eventName: string,
      availableTickets: BigNumberish,
      externalHandler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    handleTicket(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _nullifierHash: BytesLike,
      _commitment: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nullifierHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    purchaseTicket(
      _ticketedEventIndex: BigNumberish,
      commitment: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ticketCommitments(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        buyer: string;
        ticketedEventIndex: BigNumber;
        used: boolean;
      }
    >;

    ticketedEventIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    ticketedEvents(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber, string] & {
        creator: string;
        price: BigNumber;
        eventName: string;
        availableTickets: BigNumber;
        externalHandler: string;
      }
    >;

    verifier(overrides?: CallOverrides): Promise<[string]>;

    verifyTicket(
      _commitment: BytesLike,
      _nullifierHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  createNewTicketedEvent(
    price: BigNumberish,
    eventName: string,
    availableTickets: BigNumberish,
    externalHandler: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  handleTicket(
    _proof: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    _nullifierHash: BytesLike,
    _commitment: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nullifierHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  purchaseTicket(
    _ticketedEventIndex: BigNumberish,
    commitment: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ticketCommitments(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean] & {
      buyer: string;
      ticketedEventIndex: BigNumber;
      used: boolean;
    }
  >;

  ticketedEventIndex(overrides?: CallOverrides): Promise<BigNumber>;

  ticketedEvents(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, BigNumber, string] & {
      creator: string;
      price: BigNumber;
      eventName: string;
      availableTickets: BigNumber;
      externalHandler: string;
    }
  >;

  verifier(overrides?: CallOverrides): Promise<string>;

  verifyTicket(
    _commitment: BytesLike,
    _nullifierHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    createNewTicketedEvent(
      price: BigNumberish,
      eventName: string,
      availableTickets: BigNumberish,
      externalHandler: string,
      overrides?: CallOverrides
    ): Promise<void>;

    handleTicket(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _nullifierHash: BytesLike,
      _commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    nullifierHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    purchaseTicket(
      _ticketedEventIndex: BigNumberish,
      commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    ticketCommitments(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        buyer: string;
        ticketedEventIndex: BigNumber;
        used: boolean;
      }
    >;

    ticketedEventIndex(overrides?: CallOverrides): Promise<BigNumber>;

    ticketedEvents(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber, string] & {
        creator: string;
        price: BigNumber;
        eventName: string;
        availableTickets: BigNumber;
        externalHandler: string;
      }
    >;

    verifier(overrides?: CallOverrides): Promise<string>;

    verifyTicket(
      _commitment: BytesLike,
      _nullifierHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "NewTicketedEventCreated(uint256)"(
      index?: null
    ): TypedEventFilter<[BigNumber], { index: BigNumber }>;

    NewTicketedEventCreated(
      index?: null
    ): TypedEventFilter<[BigNumber], { index: BigNumber }>;
  };

  estimateGas: {
    createNewTicketedEvent(
      price: BigNumberish,
      eventName: string,
      availableTickets: BigNumberish,
      externalHandler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    handleTicket(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _nullifierHash: BytesLike,
      _commitment: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nullifierHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchaseTicket(
      _ticketedEventIndex: BigNumberish,
      commitment: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ticketCommitments(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ticketedEventIndex(overrides?: CallOverrides): Promise<BigNumber>;

    ticketedEvents(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifier(overrides?: CallOverrides): Promise<BigNumber>;

    verifyTicket(
      _commitment: BytesLike,
      _nullifierHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createNewTicketedEvent(
      price: BigNumberish,
      eventName: string,
      availableTickets: BigNumberish,
      externalHandler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    handleTicket(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _nullifierHash: BytesLike,
      _commitment: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nullifierHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    purchaseTicket(
      _ticketedEventIndex: BigNumberish,
      commitment: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ticketCommitments(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ticketedEventIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ticketedEvents(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifyTicket(
      _commitment: BytesLike,
      _nullifierHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
