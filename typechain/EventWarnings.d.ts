/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface EventWarningsInterface extends ethers.utils.Interface {
  functions: {
    "createWarning(uint8,string,address)": FunctionFragment;
    "createdWarning(address,address)": FunctionFragment;
    "editWarning(uint8,string,address,uint256)": FunctionFragment;
    "getWarnings(address)": FunctionFragment;
    "warningCount(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createWarning",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createdWarning",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "editWarning",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getWarnings", values: [string]): string;
  encodeFunctionData(
    functionFragment: "warningCount",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "createWarning",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createdWarning",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editWarning",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "warningCount",
    data: BytesLike
  ): Result;

  events: {
    "EditWarning(uint8,string,address,address)": EventFragment;
    "NewWarning(uint8,string,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EditWarning"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewWarning"): EventFragment;
}

export type EditWarningEvent = TypedEvent<
  [number, string, string, string] & {
    level: number;
    message: string;
    editedBy: string;
    warnAbout: string;
  }
>;

export type NewWarningEvent = TypedEvent<
  [number, string, string, string] & {
    level: number;
    message: string;
    createdBy: string;
    warnAbout: string;
  }
>;

export class EventWarnings extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EventWarningsInterface;

  functions: {
    createWarning(
      level: BigNumberish,
      message: string,
      about: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createdWarning(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    editWarning(
      level: BigNumberish,
      message: string,
      about: string,
      arrayIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getWarnings(
      about: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([number, string, string] & {
          level: number;
          message: string;
          createdBy: string;
        })[]
      ]
    >;

    warningCount(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  createWarning(
    level: BigNumberish,
    message: string,
    about: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createdWarning(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  editWarning(
    level: BigNumberish,
    message: string,
    about: string,
    arrayIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getWarnings(
    about: string,
    overrides?: CallOverrides
  ): Promise<
    ([number, string, string] & {
      level: number;
      message: string;
      createdBy: string;
    })[]
  >;

  warningCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    createWarning(
      level: BigNumberish,
      message: string,
      about: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createdWarning(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    editWarning(
      level: BigNumberish,
      message: string,
      about: string,
      arrayIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getWarnings(
      about: string,
      overrides?: CallOverrides
    ): Promise<
      ([number, string, string] & {
        level: number;
        message: string;
        createdBy: string;
      })[]
    >;

    warningCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "EditWarning(uint8,string,address,address)"(
      level?: null,
      message?: null,
      editedBy?: null,
      warnAbout?: null
    ): TypedEventFilter<
      [number, string, string, string],
      { level: number; message: string; editedBy: string; warnAbout: string }
    >;

    EditWarning(
      level?: null,
      message?: null,
      editedBy?: null,
      warnAbout?: null
    ): TypedEventFilter<
      [number, string, string, string],
      { level: number; message: string; editedBy: string; warnAbout: string }
    >;

    "NewWarning(uint8,string,address,address)"(
      level?: null,
      message?: null,
      createdBy?: null,
      warnAbout?: null
    ): TypedEventFilter<
      [number, string, string, string],
      { level: number; message: string; createdBy: string; warnAbout: string }
    >;

    NewWarning(
      level?: null,
      message?: null,
      createdBy?: null,
      warnAbout?: null
    ): TypedEventFilter<
      [number, string, string, string],
      { level: number; message: string; createdBy: string; warnAbout: string }
    >;
  };

  estimateGas: {
    createWarning(
      level: BigNumberish,
      message: string,
      about: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createdWarning(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    editWarning(
      level: BigNumberish,
      message: string,
      about: string,
      arrayIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getWarnings(about: string, overrides?: CallOverrides): Promise<BigNumber>;

    warningCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createWarning(
      level: BigNumberish,
      message: string,
      about: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createdWarning(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    editWarning(
      level: BigNumberish,
      message: string,
      about: string,
      arrayIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getWarnings(
      about: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    warningCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
